openapi: 3.0.3
info:
  title: my-blog
  version: 1.0.0
  description: Personal blog
paths:
  /api/v1/posts/:
    get:
      operationId: api_v1_posts_retrieve
      description: Получение списка и создание поста
      summary: Получить список всех постов
      tags:
      - Посты
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    post:
      operationId: api_v1_posts_create
      description: Получение списка и создание поста
      summary: Создать новый пост
      tags:
      - Посты
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/posts/{id}/:
    get:
      operationId: api_v1_posts_retrieve_2
      description: Просмотр, обновление и удаление конкретного поста
      summary: Получить конкретный пост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Посты
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    put:
      operationId: api_v1_posts_update
      description: Просмотр, обновление и удаление конкретного поста
      summary: Обновить конкретный пост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Посты
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    delete:
      operationId: api_v1_posts_destroy
      description: Просмотр, обновление и удаление конкретного поста
      summary: Удалить конкретный пост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Посты
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/:
    get:
      operationId: api_v1_users_retrieve
      description: Все пользователи
      summary: Получить список всех пользователей
      tags:
      - Пользователи
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_v1_users_create
      description: Все пользователи
      summary: Создать нового пользователя
      tags:
      - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: api_v1_users_retrieve_2
      description: Чтение, обновление и удаления пользователя
      summary: Получает данные конкретного пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Пользователи
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_v1_users_update
      description: Чтение, обновление и удаления пользователя
      summary: Обновляет данные конкретного пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_v1_users_destroy
      description: Чтение, обновление и удаления пользователя
      summary: Удаляет конкретного пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Пользователи
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    BlogPost:
      type: object
      description: |-
        Сериализатор для модели BlogPost.

        Атрибуты:
        - user (str): Пользователь, связанный с записью в блоге.
        - title (str): Заголовок записи в блоге.
        - text (str): Текстовое содержимое записи в блоге.
        - created_at (DateTime): Временная метка создания записи в блоге.
        - published (bool): Указывает, опубликована ли запись в блоге.
      properties:
        user:
          type: string
        title:
          type: string
        text:
          type: string
        created_at:
          type: string
          format: date-time
        published:
          type: boolean
      required:
      - created_at
      - published
      - text
      - title
      - user
    RoleEnum:
      enum:
      - user
      - admin
      type: string
      description: |-
        * `user` - Пользователь
        * `admin` - Administrator
    User:
      type: object
      description: Сериализатор для модели пользовательских данных.
      properties:
        username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Адрес электронной почты
          maxLength: 254
        first_name:
          type: string
          title: Имя
          maxLength: 150
        last_name:
          type: string
          title: Фамилия
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          title: User role
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
